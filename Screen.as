package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Stage;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.display.SimpleButton;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	public class Screen extends MovieClip {		//---------Container------------------------------------------------------------------------------------------------------------------------------//		// Private Properties:		private var ScreenContainer:MovieClip;		private var ChariotContainer:MovieClip;		private var BouleContainer:MovieClip;		private var CadreContainerHaut:MovieClip;		private var CadreContainerBas:MovieClip;		private var CadreContainerGauche:MovieClip;		private var CadreContainerDroit:MovieClip;		private var BrickContainer:MovieClip;		private var ButtonContainer:MovieClip;		private var myButton:SimpleButton;		//-------------Touches--------------------------------------------------------------------------------------------------------------------------------//		private var keyRight:Boolean=false;		private var keyLeft:Boolean=false;		//-----------------------------------------------------------------------------------------------------------------------------------------------------------//		private var launched:Boolean=false;		private var _pause:Boolean=false;		//------------------Vitesses----------------------------------------------------------------------------------------------------------------------------------//		private var vitesse:Number=20;		private var vitesseBouleV:Number=10;		private var vitesseBouleH:Number=8;		//-----------------------------------------------------------------------------------------------------------------------------------------------------------//		private var TailleChariot:Number=80;		private var TailleChariotV:Number=10;		private var TailleCadreH:Number=700;		private var TailleCadreV:Number=400;		private var TailleBoule:Number=12;		private var TailleBriqueH:Number=30;		private var TailleBriqueV:Number=20;		private var vectBrick:Array;		private var vie:Number=3;		// Initialization:		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		public function Screen() {			gotoAndStop(1);			InitCadre();			InitChariot();			InitBoule();			InitBrick();			this.addEventListener(Event.ENTER_FRAME,enterFrameHandler);		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		// Public Methods:		public function enterFrameHandler(E:Event):void {			if (BouleContainer.hitTestObject(CadreContainerBas)&&vie>0) {				ScreenContainer.removeChild(BouleContainer);				ScreenContainer.removeChild(ChariotContainer);				InitChariot();				InitBoule();				ResetVar();				vie-=1;			} else if (BouleContainer.y>TailleCadreV-(TailleChariotV/2)&& vie==0) {				//la balle est perdue et on n'a plus de vie//			}			if (keyRight&&ChariotContainer.x<(TailleCadreH-90)) {				ChariotContainer.x+=vitesse;			} else if (keyLeft && ChariotContainer.x>10) {				ChariotContainer.x-=vitesse;			}			if (ChariotContainer.x>=TailleCadreH-90) {				keyRight=false;			}			if (ChariotContainer.x<=10) {				keyLeft=false;			}			GestionBoule();		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function InitCadre():void {			ScreenContainer=new MovieClip  ;			stage.addChild(ScreenContainer);			CadreContainerHaut=new MovieClip  ;			CadreContainerBas=new MovieClip  ;			CadreContainerGauche=new MovieClip  ;			CadreContainerDroit=new MovieClip  ;			var mcCadreHaut:CadreHaut=new CadreHaut();			var mcCadreBas:CadreBas=new CadreBas();			var mcCadreGauche:CadreGauche=new CadreGauche();			var mcCadreDroit:CadreDroit=new CadreDroit();			CadreContainerHaut.addChild(mcCadreHaut);			CadreContainerBas.addChild(mcCadreBas);			CadreContainerGauche.addChild(mcCadreGauche);			CadreContainerDroit.addChild(mcCadreDroit);			ScreenContainer.addChild(CadreContainerBas);			ScreenContainer.addChild(CadreContainerHaut);			ScreenContainer.addChild(CadreContainerGauche);			ScreenContainer.addChild(CadreContainerDroit);			CadreContainerHaut.x=0;			CadreContainerHaut.y=0;			CadreContainerBas.x=0;			CadreContainerBas.y=(TailleCadreV-5);			CadreContainerGauche.x=0;			CadreContainerGauche.y=0;			CadreContainerDroit.x=(TailleCadreH-5);			CadreContainerDroit.y=0;		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function InitChariot():void {			stage.addEventListener(KeyboardEvent.KEY_DOWN,KeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP,KeyUp);			ChariotContainer=new MovieClip  ;			var mcChariot:Chariot = new Chariot();			ChariotContainer.addChild(mcChariot);			ScreenContainer.addChild(ChariotContainer);			ChariotContainer.x=((TailleCadreH-TailleChariot)/2);			ChariotContainer.y=(TailleCadreV-20);		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function InitBoule():void {			BouleContainer=new MovieClip  ;			var mcBoule:Boule = new Boule();			BouleContainer.addChild(mcBoule);			ScreenContainer.addChild(BouleContainer);			BouleContainer.x=(ChariotContainer.x+(TailleChariot/2)-(TailleBoule/2));			BouleContainer.y=ChariotContainer.y-TailleChariotV;			launched=false;		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function InitBrick():void {			var cordx:Number=43;			var cordy:Number=33;			var n:Number=0;			vectBrick=new Array();			for (var j=0; j<5; j++) {				for (var i=0; i<20; i++) {					BrickContainer=new MovieClip();					ScreenContainer.addChild(BrickContainer);					var mcBrick:Brick=new Brick();					BrickContainer.addChild(mcBrick);					vectBrick.push(BrickContainer);					vectBrick[n].x=cordx;					vectBrick[n].y=cordy;					n+=1;					cordx+=TailleBriqueH;				}				cordx=43;				cordy+=TailleBriqueV;			}		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function ResetVar():void {			vitesse=20;			vitesseBouleV=10;			vitesseBouleH=8;		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function KeyDown(event:KeyboardEvent):void {			if (event.keyCode==Keyboard.LEFT) {// lorsque la flèche de gauche est enfoncée				keyLeft=true;				keyRight=false;			} else if (event.keyCode==Keyboard.RIGHT) {// celle de droite				keyLeft=false;				keyRight=true;			}			if (event.keyCode==Keyboard.SPACE&&! launched) {				launched=true;			}			if (event.keyCode==Keyboard.DOWN) {				PauseMenu();			}		}			//--------------------------------------------------------------------------------------------------------------------------------------------------------//						private function PauseMenu():void{			if(!_pause){				this.removeEventListener(Event.ENTER_FRAME, enterFrameHandler);				_pause=true;				ScreenContainer.visible=false;			}			else{				this.addEventListener(Event.ENTER_FRAME,enterFrameHandler);				_pause=false;				ScreenContainer.visible=true;				}			}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//					private function ResumerPause(e:MouseEvent):void {			stage.addEventListener(Event.ENTER_FRAME,enterFrameHandler);			_pause=false;			ScreenContainer.visible=true;		}	//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function KeyUp(event:KeyboardEvent):void {			if (event.keyCode==Keyboard.RIGHT) {				keyRight=false;			}			if (event.keyCode==Keyboard.LEFT) {				keyLeft=false;			}		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function GestionBoule():void {			//Movement de la boule sur le chariot			if (! launched) {				BouleContainer.x=(ChariotContainer.x+(TailleChariot/2)-(TailleBoule/2));			}//gestion de la colision avec le cadre			if (launched) {				if (BouleContainer.hitTestObject(CadreContainerHaut)				&& (BouleContainer.hitTestObject(CadreContainerGauche) || BouleContainer.hitTestObject(CadreContainerDroit))) {					vitesseBouleV=- vitesseBouleV;				} else if (BouleContainer.hitTestObject(CadreContainerHaut)) {					vitesseBouleV=- vitesseBouleV;				} else if (BouleContainer.hitTestObject(CadreContainerGauche)) {					vitesseBouleH=- vitesseBouleH;				} else if (BouleContainer.hitTestObject(CadreContainerDroit)) {					vitesseBouleH=- vitesseBouleH;				}				//gestion de la colision avec le chariot				if (BouleContainer.hitTestObject(ChariotContainer)) {					GestionCollisionChariot(keyLeft,keyRight,BouleContainer.x,ChariotContainer.x);				}				//gestion de la colision avec les brick				GestionCollisionBrique();				BouleContainer.y-=vitesseBouleV;				BouleContainer.x+=vitesseBouleH;			}		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function GestionCollisionChariot(left:Boolean ,right:Boolean,bouleC:Number,chariotC:Number ):void {			if (vitesseBouleH > 0 && (bouleC==chariotC||bouleC<chariotC+5)) {				vitesseBouleH=- vitesseBouleH;			}			if (vitesseBouleH < 0 && (bouleC==(chariotC+TailleChariot) || bouleC>(chariotC+TailleChariot-5))) {				vitesseBouleH=- vitesseBouleH;			} else {				if (vitesseBouleH>0&&left) {					//gauche->droite et le chariot bouge vers la gauche					vitesseBouleH-=3;				} else if (vitesseBouleH<0 && left) {					vitesseBouleH+=3;				} else if (vitesseBouleH>0 && right) {					vitesseBouleH+=3;				} else if (vitesseBouleH<0 && right) {					vitesseBouleH-=3;				}			}			vitesseBouleV=Math.abs(vitesseBouleV);		}		//--------------------------------------------------------------------------------------------------------------------------------------------------------//		private function GestionCollisionBrique() {			//recommencer cette procedure pour gerer la directioin de la boule en fonction du cote qui est touche 			// et non pas la meme direction chaque fois.			var touche:Boolean=false;			var i:Number=0;			while (i<vectBrick.length && !touche) {				//si un coin de la brique est touche on inverse la vitesse verticale				if (	BouleContainer.hitTestObject(vectBrick[i])&&vectBrick[i].visible==true&&				  (BouleContainer.hitTestPoint(vectBrick[i].x,BouleContainer.y,false) ||				   BouleContainer.hitTestPoint(vectBrick[i].x+TailleBriqueH,BouleContainer.y,false))&&				 (BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y,false)||				  BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y+TailleBriqueV,false))){						vitesseBouleV=-vitesseBouleV						vectBrick[i].visible=false;						touche=true;				}				else if (BouleContainer.hitTestObject(vectBrick[i])&&vectBrick[i].visible==true) {					if (vitesseBouleH>0) {						if (BouleContainer.hitTestPoint(vectBrick[i].x,BouleContainer.y,false)) {							//si la boule va de gauche a droite et touche le cote gauche de la brique on inverse la						//vitesse horizontale							vitesseBouleH=- vitesseBouleH;							vectBrick[i].visible=false;							touche=true;						}else if (BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y+TailleBriqueV,false)) {							//si la boule va de gauche a droite et touche le bas de la brique on inverse la 						//vitesse verticale							vitesseBouleV=- vitesseBouleV;							vectBrick[i].visible=false;							touche=true;						}else if (BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y,false)) {							//si la boule va de gauche a droite et touche le haut de la brique on inverse la 						//vitesse verticale							vitesseBouleV=- vitesseBouleV;							vectBrick[i].visible=false;							touche=true;						}					}					else if (vitesseBouleH<0) {						if(BouleContainer.hitTestPoint(vectBrick[i].x+TailleBriqueH,BouleContainer.y,false)) {							//si la boule va de droite a gauche et touche le cote droit de la brique on inverse la						//vitesse horizontale							vitesseBouleH=- vitesseBouleH;							vectBrick[i].visible=false;							touche=true;						} else if (BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y+TailleBriqueV,false)) {							//si la boule va de gauche a droite et touche le bas de la brique on inverse la 						//vitesse verticale							vitesseBouleV=- vitesseBouleV;							vectBrick[i].visible=false;							touche=true;						} else if (BouleContainer.hitTestPoint(BouleContainer.x,vectBrick[i].y,false)) {							//si la boule va de gauche a droite et touche le haut de la brique on inverse la 						//vitesse verticale							vitesseBouleV=- vitesseBouleV;							vectBrick[i].visible=false;							touche=true;						}					}				}				i++;			}		}	}//fin classe}//fin package 